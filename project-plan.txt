How To Plan And Build A React Application :-
    [1] Break the desired UI into components.
    [2] build a static version (no state yet).
    [3] Think about state management and data flow.
  - This works well for small apps with one page and a few features.
  - In real-world apps, we need to adapt this process.
    [1] Gather application requirements and features.
    [2] Divide the application into pages.
        - Think about the overall and page-level UI.
        - Break the desired UI into components.
        - Design and build a static version (no state yet).
    [3] Divide the application into feature categories.
        - Think about state management and data flow.
    [4] Decide on what libraries to use (technology decisions).
  - This is just a rough overview, in the real-world,
    things are never this linear.

  Step 1 : Project Requirements From The Business :-
      - Very simple application, where users can order one or more pizzas from a menu.
      - Requires no user accounts and no login,
        users just input their names before using the app.
      - The pizza menu can change, so it should be loaded from an API.
      - Users can add multiple pizzas to a cart before ordering.
      - Ordering requires just the user's name, phone number and address.
      - If possible, GPS location should also be provided, to make delivery easier.
      - Users can mark their order as "priority",
        for an additional 20% of the cart price.
      - Orders are made by sending a POST request with the order data,
        (user data + selected pizzas) to the API.
      - Payments are made on delivery, so no payment processing is necessary in the app.
      - Each order will get a unique ID that should be displayed,
        so the user can later look up their order based on the ID.
      - Users should be able to mark their order as "priority" order,
        even after it has been placed.
  Step 2 : Features :-
      - Feature Categories :
          [1] User.
          [2] Menu.
          [3] Cart.
          [4] Order.
  Step 3 : Pages :-
      - Necessary Pages :
          [1] Homepage              "/".
          [2] Pizza Menu            "/menu".
          [3] Cart                  "/cart".
          [4] Place a new order     "/order/new".
          [5] Looking up an order   "/order/:orderID".
  Step 4 : State Management :-
      - State "Domains" / "Slices" And Types Of State :
          [1] User   => Global UI state (no accounts, so stays in app).
          [2] Menu.  => Global remote state (menu is fetched from API).
          [3] Cart.  => Global UI state (no need for API, just stored in app).
          [4] Order. => Global remote state (fetched and submitted to API).
  Step 5 : Technology Decisions :
      - Routing => React Router (The standard for react SPAs).
      - Styling => tailwindcss (Trendy way of styling applications).
      - Remote State Management => React Router.
          - New way of fetching data right inside React Router that is worth exploring
            ("render-as-you-fetch" instead of "fetch-on-render")
            Not really state management, as it doesn't persist state.
      - UI State Management => Redux.
          - State is fairly complex for this app.
            Redux has many advantages for UI state.